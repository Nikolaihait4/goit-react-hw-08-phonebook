{"version":3,"file":"static/js/806.0abd8e50.chunk.js","mappings":"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","sources":["redux/contacts.selectors.js","webpack://react-homework-template/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst selectPhonebook = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.error\n);\nexport const selectContactsFilterTerm = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.filterTerm\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"ContactFilter_filterContainer__naEn8\",\"filterLabel\":\"ContactFilter_filterLabel__PezPD\",\"filterInfo\":\"ContactFilter_filterInfo__0BYqL\",\"filterInput\":\"ContactFilter_filterInput__MrNtP\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilterTerm } from 'redux/contacts.selectors';\nimport { setFilterTerm } from 'redux/contactsReducer';\nimport css from './ContactFilter.module.css';\n\nconst ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filterTerm = useSelector(selectContactsFilterTerm);\n\n  const handleFilterTerm = value => {\n    dispatch(setFilterTerm(value));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <label className={css.filterLabel}>\n        <h4 className={css.filterInfo}>Search Contact</h4>\n        <input\n          className={css.filterInput}\n          onChange={e => handleFilterTerm(e.target.value)}\n          value={filterTerm}\n          type=\"text\"\n          placeholder=\"Search contacts\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default ContactFilter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactContainer\":\"ContactsPage_contactContainer__embjQ\",\"contactForm\":\"ContactsPage_contactForm__-O1kL\",\"addButton\":\"ContactsPage_addButton__0LLw4\",\"contactsItem\":\"ContactsPage_contactsItem__D-ZW1\",\"contactsList\":\"ContactsPage_contactsList__satCJ\",\"contactsName\":\"ContactsPage_contactsName__VexmK\",\"deleteButton\":\"ContactsPage_deleteButton__Fg6sq\"};","import ContactFilter from 'components/ContactFilter/ContactFilter';\nimport Loader from 'components/helper/Loader';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsFilterTerm,\n  selectContactsIsLoading,\n} from 'redux/contacts.selectors';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contactsReducer';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filterTerm = useSelector(selectContactsFilterTerm);\n  const isLoading = useSelector(selectContactsIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onSubmit = contact => {\n    // Проверка на уникальность имени\n    const isDuplicateName = contacts.some(\n      existingContact =>\n        existingContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      alert('Contact with the same name already exists.');\n      reset({ name: '', number: '' });\n    } else {\n      dispatch(addContact(contact));\n      reset();\n    }\n  };\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div className={css.contactContainer}>\n      <form onSubmit={handleSubmit(onSubmit)} className={css.contactForm}>\n        <label className={css.nameLebel}>\n          <span className={css.nameInfo}>Name:</span>\n          <input\n            placeholder=\"Contact name\"\n            className={css.nameInput}\n            {...register('name', { required: true })}\n            type=\"text\"\n          />\n          {errors.name && <span>This field is required</span>}\n        </label>\n        <label className={css.numberLebel}>\n          <span className={css.numberInfo}>Number:</span>\n          <input\n            pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n            placeholder=\"Contact phone number\"\n            className={css.numberInput}\n            {...register('number', { required: true })}\n            type=\"text\"\n          />\n          {errors.number && <span>This field is required</span>}\n        </label>\n\n        <button type=\"submit\" className={css.addButton}>\n          Add contact\n        </button>\n      </form>\n      <ContactFilter />\n\n      {isLoading && <Loader />}\n      <ul className={css.contactsItem}>\n        {Array.isArray(contacts) &&\n          contacts\n            .filter(contact =>\n              contact.name.toLowerCase().includes(filterTerm.toLowerCase())\n            )\n            .map(contact => {\n              return (\n                <li key={contact.id} className={css.contactsList}>\n                  <h3 className={css.contactsName}>{contact.name}</h3>\n                  <p className={css.contactsNumber}>{contact.number}</p>\n                  <button\n                    className={css.deleteButton}\n                    onClick={() => onDeleteContact(contact.id)}\n                  >\n                    Delete\n                  </button>\n                </li>\n              );\n            })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectPhonebook","state","phonebook","selectContacts","createSelector","contacts","selectContactsIsLoading","isLoading","selectContactsFilterTerm","error","filterTerm","dispatch","useDispatch","useSelector","_jsx","className","css","children","_jsxs","onChange","e","value","target","setFilterTerm","type","placeholder","_useForm","useForm","register","handleSubmit","reset","errors","formState","useEffect","fetchContacts","onSubmit","contact","some","existingContact","name","toLowerCase","alert","number","addContact","_objectSpread","required","pattern","ContactFilter","Loader","Array","isArray","filter","includes","map","onClick","contactId","id","deleteContact"],"sourceRoot":""}